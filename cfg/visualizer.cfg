#!/usr/bin/env python
PACKAGE = "ycb_multicam_dataset"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

offset = gen.add_group("Offset")

selection = gen.add_group("Selection")

icp = gen.add_group("ICP_Parameters")

voxel = gen.add_group("Voxel_Grid_Parameters")

ransac = gen.add_group("RANSAC_Parameters")

size_enum = gen.enum([ gen.const("astra",      str_t, "astra", "Orbbec Astra"),
                       gen.const("basler_tof",     str_t, "basler_tof", "Basler ToF"),
                       gen.const("ensenso",      str_t, "ensenso", "Ensenso N35"),
                       gen.const("kinect2",     str_t, "kinect2", "Kinect 2"),
                       gen.const("pico_flexx",      str_t, "pico_flexx", "CamBoard pico flexx"),
                       gen.const("realsense_r200", str_t, "realsense_r200", "Intel Realsense R200"),
                       gen.const("xtion", str_t, "xtion", "ASUS Xtion Pro Live")],
                     "Camera selection")


scene_enum = gen.enum([gen.const("003_004_024_025_061_clutter",     str_t, "003_004_024_025_061_clutter", "Scene"),
                       gen.const("003_005_010_037_061_clutter",      str_t, "003_005_010_037_061_clutter", "Scene"),
                       gen.const("003_006_008_019_035_061_clutter",     str_t, "003_006_008_019_035_061_clutter", "Scene"),
                       gen.const("003_007_009_010",      str_t, "003_007_009_010", "Scene"),
                       gen.const("003_009_036_040_052_061", str_t, "003_009_036_040_052_061", "Scene"),
                       gen.const("003_011_019_021_051", str_t, "003_011_019_021_051", "Scene"),
                       gen.const("003_037_040_052",     str_t, "003_037_040_052", "Scene"),
                       gen.const("004_005_008_025_037",      str_t, "004_005_008_025_037", "Scene"),
                       gen.const("004_006_007_035_036_037_clutter",     str_t, "004_006_007_035_036_037_clutter", "Scene"),
                       gen.const("004_007_009_036_037_040_061",      str_t, "004_007_009_036_037_040_061", "Scene"),
                       gen.const("004_007_010_021_024_036_clutter", str_t, "004_007_010_021_024_036_clutter", "Scene"),
                       gen.const("004_007_010_025_051", str_t, "004_007_010_025_051", "Scene"),
                       gen.const("004_007_024_037_040_052_clutter",     str_t, "004_007_024_037_040_052_clutter", "Scene"),
                       gen.const("004_024_025_052_061",      str_t, "004_024_025_052_061", "Scene"),
                       gen.const("005_006_008_009_011_024",     str_t, "005_006_008_009_011_024", "Scene"),
                       gen.const("005_006_009_010_036",      str_t, "005_006_009_010_036", "Scene"),
                       gen.const("005_007_010_019_051_clutter", str_t, "005_007_010_019_051_clutter", "Scene"),
                       gen.const("005_008_019_025_036_051_clutter", str_t, "005_008_019_025_036_051_clutter", "Scene"),
                       gen.const("005_011_019_024_035_052",     str_t, "005_011_019_024_035_052", "Scene"),
                       gen.const("005_011_021_025_035_036_040_061",      str_t, "005_011_021_025_035_036_040_061", "Scene"),
                       gen.const("006_008_010_025_036_051_clutter",     str_t, "006_008_010_025_036_051_clutter", "Scene"),
                       gen.const("006_008_011_021_035_037_052_clutter",      str_t, "006_008_011_021_035_037_052_clutter", "Scene"),
                       gen.const("006_011_021_035_clutter", str_t, "006_011_021_035_clutter", "Scene"),
                       gen.const("006_011_021_035_mediumclutter", str_t, "006_011_021_035_mediumclutter", "Scene"),
                       gen.const("006_011_021_035_noclutter",     str_t, "006_011_021_035_noclutter", "Scene"),
                       gen.const("006_011_035_040",      str_t, "006_011_035_040", "Scene"),
                       gen.const("007_024_035_040_061",     str_t, "007_024_035_040_061", "Scene"),
                       gen.const("008_009_025_036_051",      str_t, "008_009_025_036_051", "Scene"),
                       gen.const("008_019_021", str_t, "008_019_021", "Scene"),
                       gen.const("009_010_019_035_040_clutter", str_t, "009_010_019_035_040_clutter", "Scene"),
                       gen.const("019_021_035", str_t, "019_021_035", "Scene"),
                       gen.const("037_051_052_061", str_t, "037_051_052_061", "Scene")],
                     "Camera selection")

selection.add("camera", str_t, 0, "Camera selection", "ensenso", edit_method=size_enum)

selection.add("scene", str_t, 1, "Scene selection", "006_011_021_035_clutter", edit_method=scene_enum)

selection.add("position",    int_t,    4, "Camera Position to be visualized.", 4, 0,   8)

offset.add("pos_offset_x",    double_t,    2, "Positional offset for ground truth visualization.", 0, -1, 1)
offset.add("pos_offset_y",    double_t,    2, "Positional offset for ground truth visualization.", 0, -1, 1)
offset.add("pos_offset_z",    double_t,    2, "Positional offset for ground truth visualization.", 0, -1, 1)

offset.add("rot_offset_x",    double_t,    2, "Rotational offset for ground truth visualization.", 0, -1, 1)
offset.add("rot_offset_y",    double_t,    2, "Rotational offset for ground truth visualization.", 0, -1, 1)
offset.add("rot_offset_z",    double_t,    2, "Rotational offset for ground truth visualization.", 0, -1, 1)
offset.add("rot_offset_w",    double_t,    2, "Rotational offset for ground truth visualization.", 1, -1, 1)

offset.add("save_on_change",   bool_t,   0, "Toggles save feature for offset",  False)

icp.add("icp_max_correspondence_distance", double_t, 0, "Max Correspondence Distance for ICP",    0.02, 0,   1)
icp.add("icp_transformation_epsilon",    double_t,    0, "Transformation Epsilon for ICP", 1e-9, 0,   1)
icp.add("icp_euclidean_fitness_epsilon",   double_t,   0, "Euclidean Fitness Epsilon for ICP",  5e-9, 0, 1)
icp.add("icp_iterations",   int_t,   2, "Max ICP iterations",  100, 0, 10000000)

voxel.add("voxel_grid_leaf_size", double_t, 0, "Leaf size for Voxel grid sampling.", 0.01, 0, 1)

ransac.add("ransac_distance",    double_t,    0, "Inlier distance for RANSAC", 0.02, 0,   0.2)

selection.add("remove_border_objects",   bool_t,   8, "Removes getriebelager and raceways from GT",  True)


exit(gen.generate(PACKAGE, "ycb_multicam_dataset", "visualizer"))